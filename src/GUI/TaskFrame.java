/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Other.LocalDataStorage;
import Other.SaveToDb;
import Persistent.Student;
import Persistent.Subject;
import Persistent.Task;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author adam
 */
public class TaskFrame extends javax.swing.JFrame {

    private DefaultComboBoxModel<Student> studentsModel;
    private DefaultComboBoxModel<Subject> subjectsModel;
    private final TasksPaneModel tasksPaneModel;
    private Task task;
    private String errorMsg;
    private boolean newTask;
    private String studentComboInput;
    private String subjectComboInput;

    /**
     * Creates new form TaskFrame
     */
    public TaskFrame(TasksPaneModel tasksPaneModel) {
        this.tasksPaneModel = tasksPaneModel;
        getStudentsModel();
        getSubjectsModel();
        initComponents();
        setTitle("Nový úkol");
        newTask = true;
    }

    public TaskFrame(TasksPaneModel tasksPaneModel, Task task) {
        this.tasksPaneModel = tasksPaneModel;
        this.task = task;
        getStudentsModel();
        getSubjectsModel();
        initComponents();
        headline.setText("Upravit úkol");
        name.setText(task.getName().toString());
        description.setText(task.getDescription().toString());

        for (int i = 0; i < studentsModel.getSize(); i++) {
            String studentXname = studentsModel.getElementAt(i).getXname();
            if (studentXname.equals(task.getStudent().getXname())) {
                studentsModel.setSelectedItem(studentsModel.getElementAt(i));
                break;
            }
        }

        for (int i = 0; i < subjectsModel.getSize(); i++) {
            String subjectName = subjectsModel.getElementAt(i).toString();
            if (subjectName.equals(task.getSubject().getName())) {
                subjectsModel.setSelectedItem(subjectsModel.getElementAt(i));
                break;
            }
        }

        setTitle("Upravit úkol");
        newTask = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameLabel = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        description = new javax.swing.JTextField();
        saveTask = new javax.swing.JButton();
        cancelTask = new javax.swing.JButton();
        headline = new javax.swing.JLabel();
        studentComboBox = new javax.swing.JComboBox();
        studentComboLabel = new javax.swing.JLabel();
        subjectComboBox = new javax.swing.JComboBox();
        subjectComboLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nameLabel.setText("Název");

        descriptionLabel.setText("Popis");

        saveTask.setText("Uložit");
        saveTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTask(evt);
            }
        });

        cancelTask.setText("Zrušit");
        cancelTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelTask(evt);
            }
        });

        headline.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        headline.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headline.setText("Nový úkol");

        studentComboBox.setModel(studentsModel);

        studentComboLabel.setText("Student");

        subjectComboBox.setModel(subjectsModel);

        subjectComboLabel.setText("Předmět");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(saveTask)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cancelTask)
                                .addGap(25, 25, 25))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(subjectComboLabel)
                                    .addComponent(studentComboLabel)
                                    .addComponent(descriptionLabel)
                                    .addComponent(nameLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(studentComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(subjectComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(description, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                                    .addComponent(name)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(headline)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headline)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(nameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(descriptionLabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentComboLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subjectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subjectComboLabel))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveTask)
                    .addComponent(cancelTask))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveTask(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTask
        if (checkInputData()) {
            Student student = LocalDataStorage.getStudentUsingXname(splitStudentXname(studentComboInput));
            Subject subject = LocalDataStorage.getSubjectUsingSubjectName(subjectComboInput.toString());
            if (newTask) {
                task = new Task(name.getText(), description.getText(), subject, student);
                if (LocalDataStorage.addTask(task)) {
                    student.addSubject(subject);
                    student.addTask(task);
                    subject.addTask(task);
                    name.setText("");
                    description.setText("");
                    Thread t1 = new Thread(new SaveToDb(task));
                    t1.start();
                    try {
                        t1.join();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(TaskFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    tasksPaneModel.fireTableDataChanged();
                    cancelTask(evt);
                } else {
                    errorMsg = "Takový úkol již v databázi existuje";
                    JOptionPane.showMessageDialog(this, errorMsg, "Chyba", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                student.addSubject(subject);
                student.addTask(task);
                subject.addTask(task);
                task.setName(name.getText());
                task.setDescription(description.getText());
                task.setStudent((Student) studentsModel.getSelectedItem());
                task.setSubject((Subject) subjectsModel.getSelectedItem());
                LocalDataStorage.changeTask(task);
                Thread t1 = new Thread(new SaveToDb(task));
                t1.start();
                try {
                    t1.join();
                } catch (InterruptedException ex) {
                    Logger.getLogger(TaskFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                tasksPaneModel.fireTableDataChanged();
                cancelTask(evt);
            }
        } else {
            JOptionPane.showMessageDialog(this, errorMsg, "Chyba", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveTask

    private void cancelTask(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelTask
        this.dispose();
    }//GEN-LAST:event_cancelTask

    private DefaultComboBoxModel getStudentsModel() {
        studentsModel = new DefaultComboBoxModel<Student>();
        //studentsModel.addElement(""); //TODO nechat tady?
        for (Student student : LocalDataStorage.studentsList) {
            studentsModel.addElement(student);
        }
        return studentsModel;
    }

    private DefaultComboBoxModel getSubjectsModel() {
        subjectsModel = new DefaultComboBoxModel<Subject>();
        //subjectsModel.addElement(""); //TODO nechat tady?
        for (Subject subject : LocalDataStorage.subjectsList) {
            subjectsModel.addElement(subject);
        }
        return subjectsModel;
    }

    private boolean checkInputData() {
        String nameInput = name.getText();
        String descriptionInput = description.getText();
        studentComboInput = studentsModel.getSelectedItem().toString();
        subjectComboInput = subjectsModel.getSelectedItem().toString(); //TODO nullpointer!!!

        if (nameInput.isEmpty()) {
            errorMsg = "Úkol musí mít název";
            return false;
        } else if (descriptionInput.isEmpty()) {
            errorMsg = "Každý úkol musí mít svůj popis";
            return false;
        } else if (studentComboInput.isEmpty()) {
            errorMsg = "Každý úkol musí mít přiřazeného studenta, který ho vypracuje";
            return false;
        } else if (subjectComboInput.isEmpty()) {
            errorMsg = "Každý úkol musí mít přiřazený předmět, které se ho týká";
            return false;
        }
        return true;
    }

    private String splitStudentXname(String studentXname) {
        String firstSplit[] = studentXname.split("\\(");
        String secondSplit[] = firstSplit[1].split("\\)");
        return secondSplit[0];
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelTask;
    private javax.swing.JTextField description;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JLabel headline;
    private javax.swing.JTextField name;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton saveTask;
    private javax.swing.JComboBox studentComboBox;
    private javax.swing.JLabel studentComboLabel;
    private javax.swing.JComboBox subjectComboBox;
    private javax.swing.JLabel subjectComboLabel;
    // End of variables declaration//GEN-END:variables
}
